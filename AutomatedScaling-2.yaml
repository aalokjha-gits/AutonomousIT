AWSTemplateFormatVersion: "2010-09-09"
Description: Stack for RightSizing, Auto Scaling and maintaining availability in servers. Remember to create the AMI image of the EC2 instance from the console before executing this stack.

Parameters:
  LaunchConfigname:
    Type: String
    Default: WP-Server LC
    Description: Enter name for launch configuration for ASG

  MainInstanceId:
    Type: AWS::EC2::Instance::Id
    Description: Choose the main Instance Id that image is to be created

  InstanceTypeParameter:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - m1.small
      - m1.large
    Description: Enter t2.micro, m1.small, m1.large. Default is t2.micro for free tier users.

  KeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Select the key pair.
  
  SecurityGroupId:
    Type: List<AWS::EC2::SecurityGroup::Id>
    Description: Enter the security group you want to assign.

  DeviceNamePath:
    Type: String
    Default: /dev/xvda
    Description: Enter device name from the storage information.

  EBSVolumeSize:
    Type: Number
    Default: 8
    Description: Enter size of volume from the storage information.

  EBSVolumeType:
    Type: String
    Default: gp2
    Description: Enter type of volume from the storage information.

  LoadBalancerName:
    Type: String
    Description: Enter all the loadbalancer you want to assign seperated by comma.
  
  SubnetsName:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Enter all the public subnets ids you want to assign, seperated by comma. (Note:- choose at least 2 subnets)

Resources:
#Creating Launch Configuration
  myLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties: 
      AssociatePublicIpAddress: true
      ImageId: 
        Ref: AMI
      InstanceMonitoring: true
      InstanceType: 
        Ref: InstanceTypeParameter
      KeyName: 
        Ref: KeyPair
      LaunchConfigurationName: 
        Ref: LaunchConfigname
      SecurityGroups: 
        Ref: SecurityGroupId
      BlockDeviceMappings: 
        - DeviceName: 
            Ref: DeviceNamePath
          Ebs: 
            VolumeSize: 
              Ref: EBSVolumeSize
            VolumeType: 
              Ref: EBSVolumeType
            Encrypted: false
            DeleteOnTermination: "true"

  #Creating Auto Scaling Group
  myAutoScalegroup:
      Type: AWS::AutoScaling::AutoScalingGroup
      Properties: 
        AutoScalingGroupName: MainServerASG
        Cooldown: 20
        DesiredCapacity: 1
        HealthCheckGracePeriod: 20
        HealthCheckType: EC2
        LaunchConfigurationName:
          Ref: myLaunchConfig
        LoadBalancerNames: 
          - Ref: LoadBalancerName
        MaxSize: 3
        MetricsCollection: 
          - Granularity: "1Minute"
            Metrics: 
              - "GroupMinSize"
              - "GroupMaxSize"
              - "GroupInServiceInstances"
              - "GroupTotalInstances"
        MinSize: 1
        NewInstancesProtectedFromScaleIn: true
        VPCZoneIdentifier: 
          Ref: SubnetsName

  #Assigning Policy to ASG
  myASGPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties: 
      AutoScalingGroupName: 
        Ref: myAutoScalegroup
      EstimatedInstanceWarmup: 20
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration: 
          DisableScaleIn: false
          PredefinedMetricSpecification: 
            PredefinedMetricType: ASGAverageCPUUtilization
          TargetValue: 70
  #Creating the AMI image of the sever
  AMI:
    Type: Custom::AMI
    Properties:
        ServiceToken: !GetAtt AMIFunction.Arn
        InstanceId: !Ref MainInstanceId
      
  AMIFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: !Sub |
          import logging
          import cfnresponse
          import json
          import boto3
          from threading import Timer
          from botocore.exceptions import WaiterError
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def handler(event, context):

            ec2 = boto3.resource('ec2')
            physicalId = event['PhysicalResourceId'] if 'PhysicalResourceId' in event else None

            def success(data={}):
              cfnresponse.send(event, context, cfnresponse.SUCCESS, data, physicalId)

            def failed(e):
              cfnresponse.send(event, context, cfnresponse.FAILED, str(e), physicalId)

            logger.info('Request received: %s\n' % json.dumps(event))

            try:
              instanceId = event['ResourceProperties']['InstanceId']
              if (not instanceId):
                raise 'InstanceID required'

              if not 'RequestType' in event:
                success({'Data': 'Unhandled request type'})
                return
              #For deleting the snapshots & AMI Image
              if event['RequestType'] == 'Delete':
                if (not physicalId.startswith('ami-')):
                  raise 'Unknown PhysicalId: %s' % physicalId

                ec2client = boto3.client('ec2')
                images = ec2client.describe_images(ImageIds=[physicalId])
                for image in images['Images']:
                  ec2.Image(image['ImageId']).deregister()
                  snapshots = ([bdm['Ebs']['SnapshotId'] 
                                for bdm in image['BlockDeviceMappings'] 
                                if 'Ebs' in bdm and 'SnapshotId' in bdm['Ebs']])
                  for snapshot in snapshots:
                    ec2.Snapshot(snapshot).delete()

                success({'Data': 'OK'})
              #For Creating and Updating the AMI Image and Snapshots
              elif event['RequestType'] in set(['Create', 'Update']):
                if not physicalId:  # AMI creation has not been requested yet
                  instance = ec2.Instance(instanceId)

                  image = instance.create_image(Name="WPServerImage")

                  physicalId = image.image_id
                else:
                  logger.info('Continuing in awaiting image available: %s\n' % physicalId)

                ec2client = boto3.client('ec2')
                waiter = ec2client.get_waiter('image_available')

                try:
                  waiter.wait(ImageIds=[physicalId], WaiterConfig={'Delay': 30, 'MaxAttempts': 6})
                except WaiterError as e:
                  # Request the same event but set PhysicalResourceId so that the AMI is not created again
                  event['PhysicalResourceId'] = physicalId
                  logger.info('Timeout reached, continuing function: %s\n' % json.dumps(event))
                  lambda_client = boto3.client('lambda')
                  lambda_client.invoke(FunctionName=context.invoked_function_arn, 
                                        InvocationType='Event',
                                        Payload=json.dumps(event))
                  return

                success({'Data': 'OK'})
              else:
                success({'Data': 'OK'})
            except Exception as e:
              failed(e)
      Runtime: python2.7
      Timeout: 300
      Tags:
        - Key: Name
          Value: AMI-Image-Create
  LambdaExecutionRole:
        Type: AWS::IAM::Role
        Properties:
          AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Principal: {Service: [lambda.amazonaws.com]}
              Action: ['sts:AssumeRole']
          Path: /
          ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
          - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
          Policies:
          - PolicyName: EC2Policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                  - 'ec2:DescribeInstances'
                  - 'ec2:DescribeImages'
                  - 'ec2:CreateImage'
                  - 'ec2:DeregisterImage'
                  - 'ec2:DescribeSnapshots'
                  - 'ec2:DeleteSnapshot'
                  Resource: ['*']
          Tags:
          - Key: Name
            Value: WP-LER

Outputs:
  AMI:
    Value: !Ref AMI

