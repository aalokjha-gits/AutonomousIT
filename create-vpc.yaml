AWSTemplateFormatVersion: "2010-09-09"
Description: Stack for all the services required for Wordpress Application like LoadBalancer, Security Group, VPC, Subnets, Apacher-php server, Database Server.

#Creating The Global Parameters
Parameters:
  KeyPairSelector:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Select the key pair.

#Creating all the resources i.e. VPC, Subnets, SecurityGroup, InternetGateway, Route Tables, Routes, EC2 Instance, Load Balancer.
Resources:
#Creating Security Groups for LB, DB, Instance
#MYELBSG Refers to security group for Load Balancer
  MYELBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: Allow http to client host
        VpcId:
          Ref: myVPC
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
#ApacheSg Refers to security group for Instance
  ApacheSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: Allow http to client host
        VpcId:
          Ref: myVPC
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: 
            Ref: MYELBSG
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0
#DBSG Refers to security group for Databases
  DBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: Allow http to client host
        VpcId:
          Ref: myVPC
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: 
            Ref: ApacheSG

#Creating the VPC       
  myVPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: 174.0.0.0/16
      EnableDnsHostnames: 'true'
      EnableDnsSupport: 'true'
      InstanceTenancy: default
      Tags: 
        - Key : Name
          Value : My-CFT-VPC

#Creating the Public and private subnets for Multi-Availability Zone
  publicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: 174.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: "us-east-1a"
      Tags:
        - Key : Name
          Value : Public Subnet1

  publicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: 174.0.5.80/28
      MapPublicIpOnLaunch: true
      AvailabilityZone: "us-east-1c"
      Tags:
        - Key : Name
          Value : Public Subnet 2 

  privateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: 174.0.2.0/24
      AvailabilityZone: "us-east-1b"
      Tags:
        - Key : Name
          Value : Private Subnet1

  privateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: 174.0.6.0/24
      AvailabilityZone: "us-east-1c"
      Tags:
        - Key : Name
          Value : Private Subnet2

  publicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: myVPC
      Tags:
        - Key: Name
          Value: Public RT
#Creating Routes and RouteTable with subnet associations
  Route:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref publicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref myInternetGateway

  privateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: myVPC
      Tags:
        - Key: Name
          Value: Private RT

  publicRouteTableAssociation1:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId:
          Ref: publicSubnet1
        RouteTableId:
          Ref: publicRouteTable

  publicRouteTableAssociation2:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId:
          Ref: publicSubnet2
        RouteTableId:
          Ref: publicRouteTable
  
  privateRouteTableAssociation1:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId:
          Ref: privateSubnet1
        RouteTableId:
          Ref: privateRouteTable

  privateRouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId:
          Ref: privateSubnet2
        RouteTableId:
          Ref: privateRouteTable

#Creating InternetGateway
  myInternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties:
        Tags:
        - Key: Name
          Value: my-cft-igw

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: myVPC
      InternetGatewayId:
        Ref: myInternetGateway

#Creating EC2 instance and configuring Apache, PHP server
  MyInstance:
    Type: AWS::EC2::Instance
    Properties:
      SubnetId : 
        Ref: publicSubnet1
      ImageId: ami-0be2609ba883822ec
      InstanceType: t2.micro
      KeyName: KeyPairSelector
      SecurityGroupIds:
        - Ref: ApacheSG
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install httpd php php-mysql -y
          cd /var/www/html
          echo "healthy" > healthy.html
          wget https://wordpress.org/wordpress-5.1.1.tar.gz
          sudo tar -xzf wordpress-5.1.1.tar.gz
          sudo cp -r wordpress/* /var/www/html/
          sudo rm -rf wordpress
          sudo rm -rf wordpress-5.1.1.tar.gz
          sudo chmod 755 -R wp-content/
          sudo chown -R apache:apache wp-content
          sudo chmod 777 -R /var/www/html/
          sudo chkconfig httpd on
          sudo service httpd start
          sudo service httpd restart

#Creating Subnet Group for database
  myDBSubnetGroup: 
    Type: AWS::RDS::DBSubnetGroup
    Properties: 
        DBSubnetGroupName: Mydatabasessubnet
        DBSubnetGroupDescription: description
        SubnetIds: 
          - Ref: privateSubnet1
          - Ref: privateSubnet2
        Tags: 
          - 
            Key: Name
            Value: DBSubnetGroup
      
#Creating database  
  mydatabase:
    Type: AWS::RDS::DBInstance
    Properties: 
      DBInstanceIdentifier: sqldatabase
      DBInstanceClass: db.t2.micro
      AllocatedStorage: 50
      DBName: wordpress
      DBSubnetGroupName:
        Ref: myDBSubnetGroup
      Engine: MySQL
      EngineVersion: 5.7.22
      MultiAZ: true
      MasterUsername: admin
      MasterUserPassword: wordpress
      Port: 3306
      PubliclyAccessible: false
      VPCSecurityGroups: 
        - Ref: DBSG

#Creating Load balancer
  myELB:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties: 
      ConnectionDrainingPolicy: 
        Enabled: true
        Timeout: 50
      CrossZone: true
      HealthCheck: 
        Target: HTTP:80/healthy.html
        HealthyThreshold: '2'
        UnhealthyThreshold: '3'
        Interval: '10'
        Timeout: '5'
      Instances: 
        - Ref: MyInstance
      Listeners: 
         - InstancePort: '80'
           InstanceProtocol: HTTP
           LoadBalancerPort: '80'
           Protocol: HTTP
      LoadBalancerName: ServerELB
      Scheme: internet-facing
      SecurityGroups: 
        - Ref: MYELBSG
      Subnets: 
        - Ref: publicSubnet1
        - Ref: publicSubnet2